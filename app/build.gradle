apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'

def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
} else {
    keystoreProperties.setProperty("keyAlias", String.valueOf(System.getenv("KEY_ALIAS")))
    keystoreProperties.setProperty("keyPassword", String.valueOf(System.getenv("KEY_PASSWORD")))
    keystoreProperties.setProperty("storeFile", String.valueOf(System.getenv("STORE_FILE")))
    keystoreProperties.setProperty("storePassword", String.valueOf(System.getenv("STORE_PASSWORD")))
}

task('incrementVersionCode').doLast {
    def versionPropsFile = file('version.properties')

    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))

        def code = versionProps['VERSION_CODE'].toInteger() + 1

        versionProps['VERSION_CODE'] = code.toString()
        versionProps.store(versionPropsFile.newWriter(), null)
    } else {
        throw new GradleException("Could not read version.properties!")
    }
}

android {
    defaultConfig {
        vectorDrawables.useSupportLibrary = true
    }

    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }

    compileSdkVersion 29
    buildToolsVersion "29.0.3"

    def versionPropsFile = file('version.properties')

    if (versionPropsFile.canRead()) {
        Properties versionProps = new Properties()

        versionProps.load(new FileInputStream(versionPropsFile))

        def code = versionProps['VERSION_CODE'].toInteger() + 1
        def name = versionProps['VERSION_NAME']

        defaultConfig {
            applicationId "co.eschool.nersuvidha"
            minSdkVersion 19
            targetSdkVersion 29
            versionCode code
            versionName name
            vectorDrawables.useSupportLibrary = true
            multiDexEnabled true
            testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        }
    } else {
        throw new GradleException("Could not read version.properties!")
    }

    final BASE_URL = "http://www.wsiznsuvidha.com/"

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
            debuggable false
        }
        debug {
            applicationIdSuffix ".debug"
            debuggable true
        }
    }

    flavorDimensions 'api-environment'
    productFlavors {
        production {
            dimension 'api-environment'
            applicationIdSuffix ".production"
            buildConfigField('String', 'BASE_URL', "\"" + BASE_URL + "\"")
        }
    }
}

androidExtensions {
    experimental = true
}

dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.1.0'
    implementation 'androidx.core:core-ktx:1.2.0'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test.ext:junit:1.1.1'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    // Koin
    implementation "org.koin:koin-android-viewmodel:${rootProject.ext.koin_version}"

    // Retrofit
    implementation "com.squareup.retrofit2:retrofit:${rootProject.ext.retrofit_version}"
    implementation 'com.squareup.retrofit2:converter-gson:2.6.2'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.10.0'

    // Coroutines
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:${rootProject.ext.coroutines_version}"
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-android:${rootProject.ext.coroutines_version}"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${rootProject.ext.lifecycle_extensions_version}"
    implementation "androidx.lifecycle:lifecycle-runtime-ktx:${rootProject.ext.lifecycle_extensions_version}"
    implementation "androidx.lifecycle:lifecycle-livedata-ktx:${rootProject.ext.lifecycle_extensions_version}"

    // ViewModel and LiveData
    implementation "androidx.lifecycle:lifecycle-extensions:${rootProject.ext.lifecycle_version}"
    implementation "androidx.lifecycle:lifecycle-viewmodel-ktx:${rootProject.ext.lifecycle_version}"
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'
    testImplementation "androidx.arch.core:core-testing:${rootProject.ext.lifecycle_version}"

    // Timber for logging
    implementation "com.jakewharton.timber:timber:${rootProject.ext.timber_version}"
}
